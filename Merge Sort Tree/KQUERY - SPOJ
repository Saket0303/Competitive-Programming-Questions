#include<bits/stdc++.h>
using namespace std;

const int N = 30005;
vector<int> t[4*N];
int a[N];

void build_tree(int v, int tl, int tr){
    if(tl == tr){
        t[v].push_back(a[tl]);
        return;
    }
    int tm = (tl + tr) / 2;
    build_tree(2*v, tl, tm);
    build_tree(2*v + 1, tm + 1, tr);
    merge(t[2*v].begin(), t[2*v].end(), t[2*v + 1].begin(), t[2*v + 1].end(), back_inserter(t[v]));
}

int query(int v, int tl, int tr, int l, int r, int k){
    if(tl > r || tr < l) return 0;

    if(l <= tl && tr <= r){
        return upper_bound(t[v].begin(), t[v].end(), k) - t[v].begin();
    }

    int tm = (tl + tr) / 2;
    return query(2*v, tl, tm, l, min(r, tm), k) + query(2*v+1, tm+1, tr, max(l, tm + 1), r, k);
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>a[i];
    }
    build_tree(1,1,n);
    int q;
    cin>>q;
    while(q--){
        int i,j,k;
        cin>>i>>j>>k;
        cout<<(j-i+1 - query(1,1,n,i,j,k))<<'\n';
    }
}
