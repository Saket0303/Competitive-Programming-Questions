#include<bits/stdc++.h>
using namespace std;

const int N = 1e5 + 10;

vector<int> t[4*N];

void build(int a[], int v, int tl, int tr){
    if(tl == tr){
        t[v] = vector<int>{a[tl]};
    }
    else{
        int tm = (tl + tr) / 2;
        build(a, 2*v, tl, tm);
        build(a, 2*v + 1, tm + 1, tr);
        merge(t[2*v].begin(), t[2*v].end(), t[2*v+1].begin(), t[2*v+1].end(), back_inserter(t[v]));
    }
}

int query(int v, int tl, int tr, int l, int r, int x){
    if(l > r){
        return INT_MAX;
    }
    if(tl == l && tr == r){
        vector<int> :: iterator pos = lower_bound(t[v].begin(), t[v].end(), x);
        if(pos != t[v].end()){
            return *pos;
        }
        return INT_MAX;
    }
    int tm = (tl + tr) / 2;
    return min(query(v*2, tl, tm, l, min(r, tm), x), query(2*v + 1, tm + 1, tr, max(tm + 1, l), r, x));
}
