#include<bits/stdc++.h>
using namespace std;

const int N = 1e5 + 10;
pair<int,int> t[4*N];
int a[N];


int gcd(int a, int b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}

pair<int,int> combine(pair<int,int> a, pair<int,int> b){
    if(a.first == b.first){
        return make_pair(a.first, a.second + b.second);
    }
    int gcd_ = gcd(a.first, b.first);
    if(gcd_ == a.first){
        return a;
    }
    if(gcd_ == b.first){
        return b;
    }
    return make_pair(gcd_, 0);
}

void build(int v, int tl, int tr){
    if(tl == tr){
        t[v] = make_pair(a[tl],1);
    }
    else{
        int tm = (tl + tr) / 2;
        build(v*2, tl, tm);
        build(2*v + 1, tm + 1, tr);
        t[v] = combine(t[2*v], t[2*v + 1]);
    }
}

pair<int,int> get_gcd(int v,int tl,int tr,int l,int r){
    if(tr < l || tl > r) return make_pair(0,0);
    if(l <= tl && r >= tr){
        return t[v];
    }
    int tm = (tl + tr) / 2;
    return combine(get_gcd(2*v, tl, tm, l, min(r,tm)), get_gcd(2*v+1, tm + 1, tr, max(l,tm + 1), r));
}

int main(){
    unordered_map<int,int> m;
    int n;
    cin>>n;
    // int a[n];
    for(int i=0;i<n;i++){
        cin>>a[i];
        m[a[i]]++;
    }
    build(1,0,n-1);
    int t;
    cin>>t;
    while(t--){
        int l,r;
        cin>>l>>r;
        pair<int,int> x = get_gcd(1,0,n-1,l-1,r-1);
        // cout<<x<<endl;
        cout<<r - l + 1 - x.second<<endl;
    }
}
