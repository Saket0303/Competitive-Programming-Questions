#include<bits/stdc++.h>
using namespace std;

const int N = 1e5 + 10;

struct data{
    int sum, pref, suff, ans;
};

data t[4*N];

data make_data(int val){
    data res;
    res.sum = val;
    res.pref = res.suff = res.ans = max(0, val);
    return res;
}

data combine(data l, data r){
    data res;
    res.sum = l.sum + r.sum;
    res.pref = max(l.pref, l.sum + r.pref);
    res.suff = max(r.suff, r.sum + l.suff);
    res.ans = max(max(l.ans, r.ans), l.suff + r.pref);
    return res;
}

void build(int a[], int v, int tl, int tr){
    if(tl == tr){
        t[v] = make_data(a[tl]);
    }
    else{
        int tm = (tl + tr) / 2;
        build(a, 2*v, tl, tm);
        build(a, 2*v + 1, tm + 1, tr);
        t[v] = combine(t[2*v], t[2*v + 1]);
    }
}

void update(int v, int tl, int tr, int pos, int new_val){
    if(tl == tr){
        t[v] = make_data(new_val);
    }
    else{
        int tm = (tl + tr) / 2;
        if(pos <= tm){
            update(2*v, tl, tm, pos, new_val);
        }
        else{
            update(2*v + 1, tm + 1, tr, pos, new_val);
        }
        t[v] = combine(t[v*2], t[v*2 + 1]);
    }
}

data query(int v, int tl, int tr, int l, int r){
    if(l > r){
        return make_data(0);
    }
    if(tl == l && tr == r){
        return t[v];
    }
    int tm = (tl + tr) / 2;
    return combine(query(2*v, tl, tm, l, min(r, tm)), query(2*v + 1, tm + 1, tr, max(l, tm + 1), r));
}
